/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import dao.PersistenciaJPA;
import model.Agendamento;
import model.Dentista;
import model.Paciente;

import javax.swing.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author marco
 */
public class FormAgendamentoCriacaoAtualizacao extends javax.swing.JFrame {
    
    private Agendamento agendamento;
    private final FormAgendamentoLista telaLista;
    private final PersistenciaJPA dao;
    private static final Logger logger = Logger.getLogger(FormAgendamentoCriacaoAtualizacao.class.getName());

    /**
     * Creates new form FormAgendamentoCriacaoAtualizacao
     */
    public FormAgendamentoCriacaoAtualizacao(Agendamento a, FormAgendamentoLista telaLista) {
        initComponents();
        this.dao = new PersistenciaJPA();
        this.telaLista = telaLista;
        
        carregarComboBoxes(); 

        if (a == null) {
            this.agendamento = new Agendamento();
            setTitle("Novo Agendamento");
        } else {
            this.agendamento = a;
            setTitle("Editar Agendamento");
            preencherCampos(); 
        }
    }

    private void carregarComboBoxes() {
        try {
            List<Paciente> pacientes = dao.getPacientes();
            System.out.println("Pacientes encontrados no banco: " + pacientes.size()); // <<< TESTE 1
            for (Paciente p : pacientes) {
                jcbPaciente.addItem(p);
            }

            List<Dentista> dentistas = dao.getDentistas();
            System.out.println("Dentistas encontrados no banco: " + dentistas.size()); // <<< TESTE 2
            for (Dentista d : dentistas) {
                jcbDentista.addItem(d);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao carregar pacientes ou dentistas: " + e.getMessage());
        }
    }
    private void preencherCampos() {
        jcbPaciente.setSelectedItem(agendamento.getPaciente());
        jcbDentista.setSelectedItem(agendamento.getDentista());
        
        // <<< MUDANÇA: Formata a data para o padrão da máscara (DD/MM/AAAA HH:MM)
        if (agendamento.getDataHora() != null) {
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm");
            txtDataHora.setText(agendamento.getDataHora().format(formatter));
        }
        
        txtProcedimento.setText(agendamento.getTipoProcedimento());
        txtStatus.setText(agendamento.getStatus());
        txtObservacoes.setText(agendamento.getObservacoes());
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtProcedimento = new javax.swing.JTextField();
        txtStatus = new javax.swing.JTextField();
        btnSalvar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        jcbPaciente = new javax.swing.JComboBox<>();
        jcbDentista = new javax.swing.JComboBox<>();
        txtDataHora = new javax.swing.JFormattedTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtObservacoes = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Paciente:");

        jLabel2.setText("Dentista:");

        jLabel3.setText("Data e Hora:");

        jLabel4.setText("Procedimento:");

        jLabel5.setText("Status:");

        jLabel6.setText("Observações:");

        txtProcedimento.setText("Procedimento:");
        txtProcedimento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtProcedimentoActionPerformed(evt);
            }
        });

        txtStatus.setText("Status:");

        btnSalvar.setText("Salvar");
        btnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarActionPerformed(evt);
            }
        });

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        jcbPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbPacienteActionPerformed(evt);
            }
        });

        try {
            txtDataHora.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/#### ##:##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        txtObservacoes.setColumns(20);
        txtObservacoes.setRows(5);
        jScrollPane1.setViewportView(txtObservacoes);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel5)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(26, 26, 26))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addContainerGap())
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(txtStatus)
                                    .addGap(0, 0, Short.MAX_VALUE))
                                .addComponent(txtDataHora)
                                .addComponent(txtProcedimento, javax.swing.GroupLayout.Alignment.TRAILING))
                            .addContainerGap()))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jcbDentista, javax.swing.GroupLayout.Alignment.LEADING, 0, 263, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(btnSalvar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnCancelar))
                            .addComponent(jcbPaciente, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jcbPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jcbDentista, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtDataHora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtProcedimento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(txtStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSalvar)
                    .addComponent(btnCancelar))
                .addGap(22, 22, 22))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtProcedimentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtProcedimentoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtProcedimentoActionPerformed

    private void btnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarActionPerformed
        Paciente pacienteSelecionado = (Paciente) jcbPaciente.getSelectedItem();
        Dentista dentistaSelecionado = (Dentista) jcbDentista.getSelectedItem();

        if (pacienteSelecionado == null || dentistaSelecionado == null) {
            JOptionPane.showMessageDialog(this, "Erro: Paciente ou Dentista não selecionado.");
            return;
        }

        agendamento.setPaciente(pacienteSelecionado);
        agendamento.setDentista(dentistaSelecionado);
        
        agendamento.setTipoProcedimento(txtProcedimento.getText().trim());
        agendamento.setStatus(txtStatus.getText().trim());
        agendamento.setObservacoes(txtObservacoes.getText().trim());
        
        // <<< MUDANÇA: O 'cérebro' que entende o formato DD/MM/AAAA HH:MM
        try {
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm");
            // Remove espaços em branco que a máscara pode deixar para evitar erros
            String dataTexto = txtDataHora.getText().replace(" ", "");
            // Verifica se o campo ficou vazio após remover espaços
            if(dataTexto.length() < 14) { // Formato completo tem 14 caracteres (dd/MM/yyyyHH:mm)
                 JOptionPane.showMessageDialog(this, "Por favor, preencha a data e hora completamente.");
                 return;
            }
            agendamento.setDataHora(LocalDateTime.parse(txtDataHora.getText(), formatter));
        } catch (DateTimeParseException e) {
            JOptionPane.showMessageDialog(this, "Formato de data/hora inválido ou incompleto.\nUse o formato DD/MM/AAAA HH:MM.");
            return;
        }

        try {
            if (agendamento.getId() == 0) {
                dao.persist(agendamento);
                JOptionPane.showMessageDialog(this, "Agendamento criado com sucesso!");
            } else {
                dao.merge(agendamento);
                JOptionPane.showMessageDialog(this, "Agendamento atualizado com sucesso!");
            }
            telaLista.atualizarTabela();
            dispose();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao salvar o agendamento: " + e.getMessage());
            logger.log(Level.SEVERE, "Erro ao salvar agendamento", e);
        }
    }//GEN-LAST:event_btnSalvarActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        dispose();
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void jcbPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbPacienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jcbPacienteActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnSalvar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<model.Dentista> jcbDentista;
    private javax.swing.JComboBox<model.Paciente> jcbPaciente;
    private javax.swing.JFormattedTextField txtDataHora;
    private javax.swing.JTextArea txtObservacoes;
    private javax.swing.JTextField txtProcedimento;
    private javax.swing.JTextField txtStatus;
    // End of variables declaration//GEN-END:variables
}
